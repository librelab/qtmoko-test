/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSSQLResultSetRowList.h"

#include <wtf/GetPtr.h>

#include "SQLResultSetRowList.h"

#include <runtime/Error.h>
#include <runtime/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSQLResultSetRowList)

/* Hash table */

static const HashTableValue JSSQLResultSetRowListTableValues[2] =
{
    { "length", DontDelete|ReadOnly, (intptr_t)jsSQLResultSetRowListLength, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLResultSetRowListTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSSQLResultSetRowListTableValues, 0 };
#else
    { 2, 1, JSSQLResultSetRowListTableValues, 0 };
#endif

/* Hash table for prototype */

static const HashTableValue JSSQLResultSetRowListPrototypeTableValues[2] =
{
    { "item", DontDelete|Function, (intptr_t)jsSQLResultSetRowListPrototypeFunctionItem, (intptr_t)1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLResultSetRowListPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSSQLResultSetRowListPrototypeTableValues, 0 };
#else
    { 2, 1, JSSQLResultSetRowListPrototypeTableValues, 0 };
#endif

const ClassInfo JSSQLResultSetRowListPrototype::s_info = { "SQLResultSetRowListPrototype", 0, &JSSQLResultSetRowListPrototypeTable, 0 };

JSObject* JSSQLResultSetRowListPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSQLResultSetRowList>(exec, globalObject);
}

bool JSSQLResultSetRowListPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSQLResultSetRowListPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSQLResultSetRowList::s_info = { "SQLResultSetRowList", 0, &JSSQLResultSetRowListTable, 0 };

JSSQLResultSetRowList::JSSQLResultSetRowList(PassRefPtr<Structure> structure, PassRefPtr<SQLResultSetRowList> impl)
    : DOMObject(structure)
    , m_impl(impl)
{
}

JSSQLResultSetRowList::~JSSQLResultSetRowList()
{
    forgetDOMObject(*Heap::heap(this)->globalData(), m_impl.get());

}

JSObject* JSSQLResultSetRowList::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSSQLResultSetRowListPrototype(JSSQLResultSetRowListPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSSQLResultSetRowList::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSQLResultSetRowList, Base>(exec, &JSSQLResultSetRowListTable, this, propertyName, slot);
}

JSValuePtr jsSQLResultSetRowListLength(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    SQLResultSetRowList* imp = static_cast<SQLResultSetRowList*>(static_cast<JSSQLResultSetRowList*>(asObject(slot.slotBase()))->impl());
    return jsNumber(exec, imp->length());
}

JSValuePtr jsSQLResultSetRowListPrototypeFunctionItem(ExecState* exec, JSObject*, JSValuePtr thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSQLResultSetRowList::s_info))
        return throwError(exec, TypeError);
    JSSQLResultSetRowList* castedThisObj = static_cast<JSSQLResultSetRowList*>(asObject(thisValue));
    return castedThisObj->item(exec, args);
}

JSC::JSValuePtr toJS(JSC::ExecState* exec, SQLResultSetRowList* object)
{
    return getDOMObjectWrapper<JSSQLResultSetRowList>(exec, object);
}
SQLResultSetRowList* toSQLResultSetRowList(JSC::JSValuePtr value)
{
    return value->isObject(&JSSQLResultSetRowList::s_info) ? static_cast<JSSQLResultSetRowList*>(asObject(value))->impl() : 0;
}

}
