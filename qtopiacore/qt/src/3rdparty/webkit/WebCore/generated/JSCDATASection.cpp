/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSCDATASection.h"

#include <wtf/GetPtr.h>

#include "CDATASection.h"

#include <runtime/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSCDATASection)

/* Hash table */

static const HashTableValue JSCDATASectionTableValues[2] =
{
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsCDATASectionConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSCDATASectionTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSCDATASectionTableValues, 0 };
#else
    { 2, 1, JSCDATASectionTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSCDATASectionConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSCDATASectionConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSCDATASectionConstructorTableValues, 0 };
#else
    { 1, 0, JSCDATASectionConstructorTableValues, 0 };
#endif

class JSCDATASectionConstructor : public DOMObject {
public:
    JSCDATASectionConstructor(ExecState* exec)
        : DOMObject(JSCDATASectionConstructor::createStructure(exec->lexicalGlobalObject()->objectPrototype()))
    {
        putDirect(exec->propertyNames().prototype, JSCDATASectionPrototype::self(exec, exec->lexicalGlobalObject()), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValuePtr proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, ImplementsHasInstance)); 
    }
};

const ClassInfo JSCDATASectionConstructor::s_info = { "CDATASectionConstructor", 0, &JSCDATASectionConstructorTable, 0 };

bool JSCDATASectionConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSCDATASectionConstructor, DOMObject>(exec, &JSCDATASectionConstructorTable, this, propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSCDATASectionPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSCDATASectionPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSCDATASectionPrototypeTableValues, 0 };
#else
    { 1, 0, JSCDATASectionPrototypeTableValues, 0 };
#endif

const ClassInfo JSCDATASectionPrototype::s_info = { "CDATASectionPrototype", 0, &JSCDATASectionPrototypeTable, 0 };

JSObject* JSCDATASectionPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCDATASection>(exec, globalObject);
}

const ClassInfo JSCDATASection::s_info = { "CDATASection", &JSText::s_info, &JSCDATASectionTable, 0 };

JSCDATASection::JSCDATASection(PassRefPtr<Structure> structure, PassRefPtr<CDATASection> impl)
    : JSText(structure, impl)
{
}

JSObject* JSCDATASection::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSCDATASectionPrototype(JSCDATASectionPrototype::createStructure(JSTextPrototype::self(exec, globalObject)));
}

bool JSCDATASection::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSCDATASection, Base>(exec, &JSCDATASectionTable, this, propertyName, slot);
}

JSValuePtr jsCDATASectionConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    return static_cast<JSCDATASection*>(asObject(slot.slotBase()))->getConstructor(exec);
}
JSValuePtr JSCDATASection::getConstructor(ExecState* exec)
{
    return getDOMConstructor<JSCDATASectionConstructor>(exec);
}


}
